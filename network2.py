import asyncio
import json
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.exceptions import (
    TelegramRetryAfter,
    TelegramForbiddenError,
    TelegramBadRequest,
    TelegramAPIError
)
from tqdm import tqdm

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
TARGET_IDS = [
    -1001234567890,  # —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
    -987654321,      # –æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
]

MESSAGE_TEXT = """üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –±–æ—Ç–∞</b>

‚úÖ –í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ flood control
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SEND_DELAY = 0.3  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
LOG_FILE = "broadcast_log.json"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤

class BroadcastStats:
    def __init__(self):
        self.sent = 0
        self.failed = 0
        self.errors = {}
        self.start_time = None
        self.end_time = None
    
    def start(self):
        self.start_time = datetime.now()
    
    def finish(self):
        self.end_time = datetime.now()
    
    def add_success(self, chat_id):
        self.sent += 1
    
    def add_error(self, chat_id, error):
        self.failed += 1
        self.errors[chat_id] = str(error)
    
    def duration(self):
        if self.start_time and self.end_time:
            return self.end_time - self.start_time
        return None
    
    def save_to_file(self):
        data = {
            "date": datetime.now().isoformat(),
            "sent": self.sent,
            "failed": self.failed,
            "errors": self.errors,
            "duration": str(self.duration())
        }
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(data, ensure_ascii=False) + "\n")

async def send_safe_message(bot: Bot, chat_id: int, stats: BroadcastStats):
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=MESSAGE_TEXT,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        stats.add_success(chat_id)
        print(f"‚úÖ [{chat_id}] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    
    except TelegramRetryAfter as e:
        wait_time = e.retry_after
        print(f"‚ö†Ô∏è [{chat_id}] Flood control. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
        await asyncio.sleep(wait_time)
        return await send_safe_message(bot, chat_id, stats)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
    
    except TelegramForbiddenError:
        stats.add_error(chat_id, "–ë–æ—Ç —É–¥–∞–ª–µ–Ω/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        print(f"‚ùå [{chat_id}] –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return False
    
    except TelegramBadRequest as e:
        stats.add_error(chat_id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print(f"‚ùå [{chat_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {e}")
        return False
    
    except TelegramAPIError as e:
        stats.add_error(chat_id, f"–û—à–∏–±–∫–∞ API: {e}")
        print(f"‚ùå [{chat_id}] –û—à–∏–±–∫–∞ Telegram API: {e}")
        return False
    
    except Exception as e:
        stats.add_error(chat_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå [{chat_id}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def broadcast(bot: Bot):
    stats = BroadcastStats()
    stats.start()
    
    print(f"üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(TARGET_IDS)} —á–∞—Ç–æ–≤")
    
    for chat_id in tqdm(TARGET_IDS, desc="–†–∞—Å—Å—ã–ª–∫–∞"):
        await send_safe_message(bot, chat_id, stats)
        await asyncio.sleep(SEND_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    stats.finish()
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.sent}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {stats.failed}")
    print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats.duration()}")
    
    if stats.errors:
        print("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫:")
        for chat_id, error in stats.errors.items():
            print(f"  [{chat_id}]: {error}")
    
    stats.save_to_file()
    print(f"\nüìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {LOG_FILE}")

async def main():
    bot = Bot(token=BOT_TOKEN)
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (y/n): ")
        if confirm.lower() != 'y':
            print("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        await broadcast(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
